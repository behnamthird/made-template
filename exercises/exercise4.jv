pipeline TemperatureDataPipeline {

    DataDownloader
        -> ZipFileExtractor
        -> CSVFileSelector
        -> TextFileInterpreter
        -> CSVFileInterpreter
        -> RenameMainHeaders
        -> RenameBatteryHeader
        -> DefineTableSchema
        -> ConvertTemperatureToFahrenheit
        -> ConvertBatteryTemperatureToFahrenheit
        -> LoadToSQLite;

    block DataDownloader oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    block ZipFileExtractor oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    block CSVFileSelector oftype FilePicker {
        path: "./data.csv";
    }

    block TextFileInterpreter oftype TextFileInterpreter { }

    block CSVFileInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }

    block RenameMainHeaders oftype CellWriter {
        at: range A1:E1;
        write: [
            "id",
            "producer",
            "model",
            "month",
            "temperature"
        ];
    }

    block RenameBatteryHeader oftype CellWriter {
        at: cell J1;
        write: [
            "battery_temperature"
        ];
    }

    block DefineTableSchema oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype PositiveInteger,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype MonthType,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }

    transform CelsiusToFahrenheit {
        from CelsiusValue oftype decimal;
        to FahrenheitValue oftype decimal;
        FahrenheitValue: (CelsiusValue * 9 / 5) + 32;
    }

    block ConvertTemperatureToFahrenheit oftype TableTransformer {
        inputColumns: [
            "temperature"
        ];
        outputColumn: "temperature";
        uses: CelsiusToFahrenheit;
    }

    block ConvertBatteryTemperatureToFahrenheit oftype TableTransformer {
        inputColumns: [
            "battery_temperature"
        ];
        outputColumn: "battery_temperature";
        uses: CelsiusToFahrenheit;
    }

    block LoadToSQLite oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }
}

constraint PositiveValueConstraint on integer: value > 0;

valuetype PositiveInteger oftype integer {
    constraints: [
        PositiveValueConstraint
    ];
}

constraint MonthRangeConstraint on integer: value >= 1 and value <= 12;

valuetype MonthType oftype integer {
    constraints: [
        MonthRangeConstraint
    ];
}
